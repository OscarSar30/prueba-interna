/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.banco.servicio.cliente.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.banco.servicio.cliente.model.ActualizarCuenta;
import com.banco.servicio.cliente.model.CrearCuenta;
import com.banco.servicio.cliente.model.GetCuentaByNumeroCuenta;
import com.banco.servicio.cliente.model.GetCuentas;
import com.banco.servicio.cliente.model.RespuestaDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-05T16:08:17.424-05:00[America/Bogota]")
@Validated
public interface CuentaController {
	

	/**
     * PUT /cuentas : Actualizar cuenta
     * Actualizar cuenta
     *
     * @param body  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Actualizar cuenta", description = "Actualizar cuenta", tags={ "Cuentas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Updated", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/cuentas",
        produces = "application/json; charset=UTF-8", 
        consumes = "application/json; charset=UTF-8",
        method = RequestMethod.PUT)
    Mono<ResponseEntity<Void>> actualizarCuenta(@Parameter(in = ParameterIn.DEFAULT, description = "Cuenta", required=true, schema=@Schema()) @RequestBody Mono<ActualizarCuenta> body);


    /**
     * GET /cuentas/identificacion/{identificacion} : Consultar cuentas por identificación
     * Consultar cuentas por identificación
     *
     * @param identificacion  (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Consultar cuentas por identificación", description = "Consultar cuentas por identificación", tags={ "Cuentas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = GetCuentas.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/cuentas/identificacion/{identificacion}",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Flux<GetCuentas>>> consultarCuentasPorIdentificacion(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("identificacion") String identificacion);
    
    
    /**
     * GET /cuentas/numero/{numeroCuenta} : Consultar cuenta por número de cuenta
     * Consultar cuenta por número de cuenta
     *
     * @param numeroCuenta  (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Consultar cuenta por número de cuenta", description = "Consultar cuenta por número de cuenta", tags={ "Cuentas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = GetCuentaByNumeroCuenta.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/cuentas/numero/{numeroCuenta}",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.GET)
    Mono<ResponseEntity<GetCuentaByNumeroCuenta>> consultarCuentaPorNumeroCuenta(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("numeroCuenta") String numeroCuenta);
    
    
    /**
     * GET /cuentas : Consultar listado de cuentas
     * Consultar listado de cuentas
     *
     * @param 
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Consultar listado de cuentas activas", description = "Consultar listado de cuentas activas", tags={ "Cuentas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = GetCuentas.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/cuentas",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Flux<GetCuentas>>> consultarCuentas();


    /**
     * POST /cuentas : Crear nueva cuenta
     * Crear nueva cuenta
     *
     * @param body  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Crear nueva cuenta", description = "Crear nueva cuenta", tags={ "Cuentas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "OK", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/cuentas",
        produces = "application/json; charset=UTF-8", 
        consumes = "application/json; charset=UTF-8",
        method = RequestMethod.POST)
    Mono<ResponseEntity<Void>> crearCuenta(@Parameter(in = ParameterIn.DEFAULT, description = "Cuenta", required=true, schema=@Schema()) @RequestBody Mono<CrearCuenta> body);

}

