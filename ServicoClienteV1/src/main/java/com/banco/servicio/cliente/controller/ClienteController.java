/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.banco.servicio.cliente.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.banco.servicio.cliente.model.GetClientes;
import com.banco.servicio.cliente.model.GetPersonaAll;
import com.banco.servicio.cliente.model.CrearCliente;
import com.banco.servicio.cliente.model.ActualizarCliente;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-05T16:08:17.424-05:00[America/Bogota]")
@Validated
public interface ClienteController {
	
	
	/**
     * PUT /clientes/update : Actualizar cliente
     * Actualizar cliente
     *
     * @param body  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Actualizar cliente", description = "Actualizar cliente", tags={ "Clientes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Updated", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))) })
    @RequestMapping(value = "/clientes",
        produces = "application/json; charset=UTF-8", 
        consumes = "application/json; charset=UTF-8",
        method = RequestMethod.PUT)
    Mono<ResponseEntity<Void>> actualizarCliente(@Parameter(in = ParameterIn.DEFAULT, description = "Cliente", required=true, schema=@Schema()) @RequestBody Mono<ActualizarCliente> body);


    /**
     * GET /clientes/{identificacion} : Consultar cliente por identificaci贸n
     * Consultar cliente por identificaci贸n
     *
     * @param identificacion  (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Consultar cliente por identificaci贸n", description = "Consultar cliente por identificaci贸n", tags={ "Clientes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = com.banco.servicio.cliente.model.GetClientes.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))) })
    @RequestMapping(value = "/clientes/{identificacion}",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.GET)
    Mono<ResponseEntity<GetClientes>> consultarClientePorIdentificacion(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("identificacion") String identificacion);
    
    
    /**
     * GET /clientes : Consultar listado de clientes
     * Consultar listado de clientes
     * 
     * @param 
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Consultar listado de clientes activos", description = "Consultar listado de clientes", tags={ "Clientes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = GetPersonaAll.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))) })
    @RequestMapping(value = "/clientes",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Flux<GetPersonaAll>>> consultarClientes();
    
    
    /**
     * POST /clientes/create : Crear nuevo cliente
     * Crear nuevo cliente
     * 
     * @param body  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Crear nuevo cliente", description = "Crear nuevo cliente", tags={ "Clientes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "OK", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))) })
    @RequestMapping(value = "/clientes/create",
        produces = "application/json; charset=UTF-8", 
        consumes = "application/json; charset=UTF-8",
        method = RequestMethod.POST)
    Mono<ResponseEntity<Void>> crearCliente(@Parameter(in = ParameterIn.DEFAULT, description = "Cliente", required=true, schema=@Schema()) @RequestBody Mono<CrearCliente> body);
    
    
    /**
     * DELETE /clientes/{id} : Eliminar cliente por ID
     * Eliminar cliente por ID
     * 
     * @param id  (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(summary = "Eliminar cliente por ID", description = "Eliminar cliente por ID", tags={ "Clientes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = com.banco.servicio.cliente.model.RespuestaDTO.class))) })
    @RequestMapping(value = "/clientes/{clienteId}",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.DELETE)
    Mono<ResponseEntity<Void>> eliminarCliente(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("clienteId") Integer clienteId);

}

